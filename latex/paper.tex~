\documentclass{ifacconf}
\usepackage[english]{babel}
\usepackage[T1]{fontenc}
\usepackage[utf8]{inputenc}
\usepackage{natbib}

\bibpunct{(}{)}{;}{a}{,}{}

\usepackage{color}
\usepackage{listings}
\lstset{ %
language=Python,                % choose the language of the code
basicstyle=\footnotesize,       % the size of the fonts that are used for the code
numbers=left,                   % where to put the line-numbers
numberstyle=\tiny,
xleftmargin= 10pt,
stepnumber=1,                   % the step between two line-numbers. If it is 1 each line will be numbered
numbersep=5pt,                  % how far the line-numbers are from the code
backgroundcolor=\color{white},  % choose the background color. You must add \usepackage{color}
showspaces=false,               % show spaces adding particular underscores
showstringspaces=false,         % underline spaces within strings
showtabs=false,                 % show tabs within strings adding particular underscores
frame=none,   		% adds a frame around the code
tabsize=2,  		% sets default tabsize to 2 spaces
captionpos=b,   		% sets the caption-position to bottom
breaklines=true,    	% sets automatic line breaking
breakatwhitespace=false,    % sets if automatic breaks should only happen at whitespace
escapeinside={\%}{)}          % if you want to add a comment within your code
}

\begin{document}
\begin{frontmatter}
\title{Simulation of 2D physics of hand drawn objects using OpenCV and Box2D}
\author[Bratislava]{Michal Sedlák}
\address[Bratislava]{Faculty of Electrical Engineering and Information Technology, Slovak University of Technology,
Ilkovičova 3, 812 19 Bratislava, Slovakia
\\
(e-mail: michal.sedlak@stuba.sk)}
\begin{abstract}
%TODO Napisat abstrakt

\end{abstract}
\begin{keyword}
Maximum 5 keywords.
\end{keyword}
\end{frontmatter}

\section{Introduction}
This paper describes applying of Newtonian physics to hand drawn objects
recognized in image from camera. Simulation of physics is used in many modern
applications. You can find in implementations used by 3D drawing and animation
programs, more complex used in game engines or exact and precise simulation in
CAE programs. Paper describes process of animation of hand drawn object, from a
capturing phase, over recognition of the objects, interpretation objects in
physical engine, to animation of such objects. This approach can be applied in
education of physics at elementary schools, with interactive blackboards, or in
computer games.

\section{Object detection and Open Computer Vision library}
To apply a physics to hand drawn objects we need to identify and isolate
objects from image. We have used a web camera as a source and Open Computer
Vision library as processing tool of the images.

\subsection{OpenCV}
In regards the book of \cite{OpenCV} OpenCV  is a library for open source
programming functions for real time computer vision, with more than five hundred
optimized algorithms. It can be used with C++, C and Python. We chose Python for
implementation in our application.

Simple image capture is shown in Listing \ref{Capture}.
\begin{lstlisting}[caption=Query image frame from web camera, label=Capture]
self.camera = cv.CaptureFromCAM(-1) %\label{Capture:init})
self.image = cv.QueryFrame(self.camera) %\label{Capture:query})
self.DetectOutline(self.image)
\end{lstlisting}
In line \ref{Capture:init} of listing \ref{Capture} we initialize our web
camera. In variable camera is allocated and initialized object that can query
camera for new image. Then as we see in \ref{Capture:query} we can get the
image from camera and store it in the variable named image. Now when we have
image data stored in the variable, we can process data to find outlines.
\begin{lstlisting}[caption=Outline detection, label=Detect]
def DetectOutline(self, image):
  image_size = cv.GetSize(image)
  grayscale = cv.CreateImage(image_size, 8, 1)	%\label{Detect:grayscale})
  cv.CvtColor(image, grayscale, cv.CV_BGR2GRAY)
  cv.EqualizeHist(grayscale, grayscale)	%\label{Detect:equalize})
  storage = cv.CreateMemStorage(0)
  cv.Threshold(grayscale, grayscale, 50, 255, cv.CV_THRESH_BINARY) %\label{Detect:threshold})
  self.contours = cv.FindContours(grayscale, %\label{Detect:contours})
    cv.CreateMemStorage(),
    cv.CV_RETR_TREE,
    cv.CV_CHAIN_APPROX_SIMPLE)
  if len(self.contours) > 0:
    self.contours = cv.ApproxPoly (self.contours, %\label{Detect:approx})
      storage,
      cv.CV_POLY_APPROX_DP,
      1.5,
      1)
  return self.contours
\end{lstlisting}
In function in Listing \ref{Detect} is shown how to find outlines of objects in
image. We convert image to gray scale as seen on line \ref{Detect:grayscale}.
Then we run histogram equalization (line: \ref{Detect:equalize}).
Equalization makes objects better visible and gives better output for
thresholding (line: \ref{Detect:threshold}) which makes black and white image
prepared for outline detection (line: \ref{Detect:contours}).

After outline detection we have tree of contours stored in the variable
self.contours. These trees are iterable objects sorted from outer to inner
outline connected by property h\_next and v\_next that we will describe in
paragraph about creation of objects from outlines.

Contour can be very complicated and consist of thousands of points, which could
cause too complicated objects. Complicated objects is time demanding to
simulate, that is why we use polynomial approximation of the contour points.
(line:~\ref{Detect:approx}).

\section{Physics simulation in Box2D}

\subsection{World}
\subsection{Gravity}
\subsection{Objects}
\subsubsection{Body}
\subsubsection{Shapes and collisions}
\subsection{Tesselation}

\section{Future work}
Identifikacia objektov
Sledovanie objektov a morfing
Interakcia hybucich sa objektov zachytenych kamerov s Box2D reprezentaciou

\section*{Acknowledgments}
The work was supported by a grant (No. NIL-I-007-d) from Iceland, Liechtenstein 
and Norway through the EEA Financial Mechanism and the Norwegian Financial 
Mechanism. This project is also co-financed from the state budget of the Slovak Republic..

%If you use BibTeX comment the second line, if not comment the first line
\bibliography{pcbib}
%\input{paper.bbl}

\end{document}


